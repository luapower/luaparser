
* hand-written lexer vs PEG-based:
	* linear perf.
	* fixed memory.
	* no string creation.
	* easier to extend.

* Lua lexer is at 20M/s.
* The native lexer is at 40M/s.
* A 5KLOC file is 200K. So full lexing at 100fps.

* advantages of re-doing the lexer+parser in Lua:

* lexer doesn't strip whitespace and comments (for syntax highlighting)
* lexer parses and reports LuaJIT language extensions (64bit number literals)

* lexer can be made to remember byte indices of tokens so that it can be
restarted at any byte index and it will relex from the last token before that
byte index.

* lexer can be extended with new tokens which are passed down to the parser
and then the parser calls a function when those tokens occur but also giving
the parser context to the function, so that the tokens are valid only
in certain contexts (eg. only as statement keywords or only in expressions)
and otherwise treated normally if the function rejects them.

* parser keeps track of lexical scope.

* implement scoped import "module" using only lexer/parser extension
facilities (language bootstrap).
